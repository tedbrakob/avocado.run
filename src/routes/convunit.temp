
  // /**
  //  * TODO::Refactor this to something reasonable
  //  * @param {*} funit 
  //  * @param {*} tunit 
  //  * @returns 
  //  */
  // convUnit = (funit, tunit) => {
  //   if (funit === tunit) return 1
  //   else if (funit === "Mile" && tunit === "Kilometer") return 1.609344
  //   else if (funit === "Mile" && tunit === "Meter") return 1609.344
  //   else if (funit === "Mile" && tunit === "Yard") return 1760
  //   else if (funit === "Mile" && tunit === "Half Mile") return 2
  //   else if (funit === "Mile" && tunit === "Quarter Mile") return 4
  //   else if (funit === "Mile" && tunit === "Eigth Mile") return 8
  //   else if (funit === "Mile" && tunit === "1500M") return 1.072896
  //   else if (funit === "Mile" && tunit === "800M") return 2.01168
  //   else if (funit === "Mile" && tunit === "400M") return 4.02336
  //   else if (funit === "Mile" && tunit === "200M") return 8.04672

  //   else if (funit === "Kilometer" && tunit === "Mile") return .6213712
  //   else if (funit === "Kilometer" && tunit === "Meter") return 1000
  //   else if (funit === "Kilometer" && tunit === "Yard") return 1093.613
  //   else if (funit === "Kilometer" && tunit === "Half Mile") return 1.2427424
  //   else if (funit === "Kilometer" && tunit === "Quarter Mile") return 2.4854848
  //   else if (funit === "Kilometer" && tunit === "Eigth Mile") return 4.9709696
  //   else if (funit === "Kilometer" && tunit === "1500M") this.setState({pace: (this.state.time / this.state.dist)  / .66666666});
  //   else if (funit === "Kilometer" && tunit === "800M") return 1.25
  //   else if (funit === "Kilometer" && tunit === "400M") return 2.5
  //   else if (funit === "Kilometer" && tunit === "200M") return 5

  //   else if (funit === "Meter" && tunit === "Mile") return .0006213712
  //   else if (funit === "Meter" && tunit === "Kilometer") return .001
  //   else if (funit === "Meter" && tunit === "Yard") return 1.093613
  //   else if (funit === "Meter" && tunit === "Half Mile") return .0012427424
  //   else if (funit === "Meter" && tunit === "Quarter Mile") return .0024854848
  //   else if (funit === "Meter" && tunit === "Eigth Mile") return .0049709696
  //   else if (funit === "Meter" && tunit === "1500M") this.setState({pace: (this.state.time / this.state.dist)  /  .0006666});
  //   else if (funit === "Meter" && tunit === "800M") return .00125
  //   else if (funit === "Meter" && tunit === "400M") return .0025
  //   else if (funit === "Meter" && tunit === "200M") return .005

  //   else if (funit === "Yard" && tunit === "Mile") return .0005681 // (1/1760=)
  //   else if (funit === "Yard" && tunit === "Kilometer") return .0009144
  //   else if (funit === "Yard" && tunit === "Meter") return .9144
  //   else if (funit === "Yard" && tunit === "Half Mile") return .0011362
  //   else if (funit === "Yard" && tunit === "Quarter Mile") return .0022724
  //   else if (funit === "Yard" && tunit === "Eigth Mile") return .0045448
  //   else if (funit === "Yard" && tunit === "1500M") this.setState({pace: (this.state.time / this.state.dist)  / .0006096});
  //   else if (funit === "Yard" && tunit === "800M") return .001143
  //   else if (funit === "Yard" && tunit === "400M") return .002286
  //   else if (funit === "Yard" && tunit === "200M") return .004572
  // };

  // calcSplits (form) {
  //   // Main routine for Splits
  //   // Validate required data, do computation, and display results
  //   // Splits = Time at each interval (Dist / Pace)
  //   let gottime = this.checkPace(form);
  //   let gotpace = this.checkTime(form);
  //   if (!(gottime || gotpace)){
  //     alert("To calculate Splits, enter the Pace and Distance or Time and Distance");
  //     return;
  //   }

  //   // get dist, pace, and punit
  //   // time in total seconds, pace in total seconds
  //   if (!(gotpace) && (gottime)){
  //     this.setState({
  //       punit: form.punit.options[form.punit.selectedIndex].value,
  //       dunit: form.dunit.options[form.dunit.selectedIndex].value,
  //     });
      
  //     let factor = this.convUnit(this.state.dunit, this.state.punit);
  //     this.setState({
  //       pace: (this.state.time / this.state.dist) / factor,
  //     });
  //   }

  //   let dcalc = form.dunit.options[form.dunit.selectedIndex].value;
  //   let pcalc = form.punit.options[form.punit.selectedIndex].value;
  //   let factor = this.convUnit(dcalc, pcalc);
  //   let pdisp = form.punit.options[form.punit.selectedIndex].text;

  //   this.setState({
  //     dist: this.state.dist * factor,
  //   });

  //   let remain = this.state.dist % 1;

  //   this.setState({
  //     nsplits: this.state.dist - remain,
  //   });

  //   // compute hgt based on number of splits
  //   let hgt = this.state.nsplits * 34;
  //   hgt = hgt.toString(10);

  //   let features = "resizable,scrollbars,height=" + hgt + ",width=250,";
  //   let swin = window.open("","",features);
  //   swin.document.writeln("<HTML><HEAD><TITLE>Splits</TITLE><HEAD><BODY>\n");
  //   swin.document.writeln("<table cellSpacing=2><tr bgcolor=#C6E2FF><td colSpan=2 align=left>Splits</td><td>Times</td></tr>\n");

  //   let stime = 0;

  //   for (let split = 1; split <= this.state.nsplits; split++) {
  //     stime = stime + this.state.pace;
  //     let shours = this.HrsFromTSecs(stime);
  //     let smins = this.MinsFromTSecs(stime);
  //     let ssecs = this.SecsFromTSecs(stime);
  //     let hmstime = shours + ":" + smins + ":" + ssecs.substring(0,5);
  //     swin.document.writeln("<tr><td>" + split + "</td><td>" + pdisp + "</td><td>" +hmstime + "</td></tr>\n");
  //   }

  //   // the last split is for the total dist
  //   if (this.state.nsplits !== this.state.dist) {
  //     let extrasecs = remain * this.state.pace;
  //     stime = stime + extrasecs;
  //     let shours = this.HrsFromTSecs(stime);
  //     let smins = this.MinsFromTSecs(stime);
  //     let ssecs = this.SecsFromTSecs(stime);
  //     let hmstime = shours + ":" + smins + ":" + ssecs.substring(0,5);
  //     swin.document.writeln("<tr><td>" + this.state.dist + "</td><td>" + pdisp + "</td><td>" +hmstime + "</td></tr>\n");
  //   }

  //   swin.document.writeln("</table></BODY></HTML>\n");
  // }